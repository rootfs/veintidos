* Veintidos
Prototype for content-addressed self-deduplicating storage using Ceph.
Similar to Plan 9 [[https://en.wikipedia.org/wiki/Venti][Venti]], but on top of [[http://ceph.com/papers/weil-rados-pdsw07.pdf][RADOS]].

* Design
** Idea
The core idea is to content address Ceph objects. Usually Ceph object
names are arbitrarily chosen by a client application. In content
addressed storage (CAS) this object name is determined by
fingerprinting the content. Thus, writing the same data twice results
in only one object stored. CAS pools therefore deduplicate data. Each
CAS object also has a reference counter, so that unused objects can be
identified and deleted.

Additionally multiple objects can be grouped into a /file/, that contains
versioned extent-like /recipes/ that point to CAS objects.

** Implementation
The system consists of a Ceph Object Class ([[github]]), that implements
reference counting and metadata storage for CAS objects, and a client
library that adds chunking, recipes, and compression.

*** Namespaces
[[./_img/veintidos_namespaces.png]]

Veintidos uses two namespaces: (1) The /CAS/ namespace for data chunks, (2)
/INDEX/ namespace to map filenames to recipe objects.
With a recipe object a client can reassemble a file that consists of
many chunks.

CAS objects are identified by their fingerprint. Currently the SHA-256
hash of the content.

Index objects do not have regular data, but use an object map instead.
Each key represents a version pointing to the fingerprint of a recipe.

*** CAS Objects
Use the fingerprint of their content as their name. The objects also
store additional metadata for the compression and fingerprinting algorithm, and a
reference count.

*** Recipes
[[./_img/veintidos_recipe.png]]

Veintidos's chunker stores recipes as CAS objects after it has written
all chunks. In the current implementation every chunk has a fixed
size.

By itself recipe objects don't store the original filename, they just
describe how to reassemble a file from CAS objects.

Recipes are stored as a list of extents. Each entry has the form
(offset, length, fingerprint)

*** Index Objects
[[./_img/veintidos_index_object.png]]

To associate recipes with file names (or any other client side data
unit) veintidos uses index objects. Each index object has a user
defined name and uses object maps to map a version to the name of a
recipe CAS object. Currently versions are UNIX timestamps.

** API Outline
- cas.put(daten) -> fingerprint (refcount++)
- cas.get(fingerprint) -> daten
- cas.up(fingerprint) -> (refcount++)
- cas.down(fingerprint) ->  (refcount–)
- cas.list() -> [[fingerprint, refcount], …]

- chunker.write_full(name, daten) -> version (cas.put(daten), cas.put(recipe))
- chunker.read_full(name) -> daten (cas.get(recipe), cas.get(daten))
- chunker.read(name, off, size) -> daten
- chunker.versions(name) -> [HEAD, …] chunker.remove_version(name, version)

** Limitations
Since Veintidos is a prototype the implementation has some limitations:

- Client-side code is written in Python
- CAS PUT uses JSON
  - Data is Base64 encoded
  - Metadata is taken as is by the object class
- CAS GET does not detect compressed objects and transparently
  decompresses them.
- CAS GET is implemented using regular RADOS operations
- CAS Chunker has no partial write support
- Recipes are implemented client side and not in an object class
* Usage
The code contains both a library and a command line utility to write
files to a CAS pool.

** CLI

#+BEGIN_SRC sh
veintidos.py put "backup" <(tar cvf - /)
veintidos.py get "backup" root_backup.tar
#+END_SRC

** Library
Ventidos has two layers:

*** CAS
Thin layer over the RADOS / CAS Object class. Provides methods to put,
get and increment / decrement the reference counter of objects

*** Chunk
Adds chunking and recipes on top of CAS.


* Dependencies
- Ceph Cluster with /CAS/ object class installed. Not part of mainline
  Ceph. Branch: [[https://github.com/irq0/ceph/tree/wip-cas-cls][github]]
- Python 2.7
- Python RADOS bindings with execute support
- msgpack
- python-snappy
- nose for the unittests
